<?php

/** Understanding PHP Arrays:
 * 
 * The PHP array is one of the most used data types in PHP. Most of the time we
 * use it without considering the impact of PHP arrays in our developed code or
 * application. It is so easy to use with its dynamic nature, we love to use php
 * arrays for almost any purpose. Sometimes we do not even want to explore if 
 * there are other available solutions which can be used instead. In this chapter
 * we are  going to explore the positives and negatives of PHP arrays, along with
 * how to use arrays in different data structure implementations along with
 * boosting performance. We will start with explaining different types of 
 * arrays in PHP followed by creating fixed sized arrays. Then we are going to see
 * memory footprints for PHP array elements and how we can improve them along
 * with some data structure implementations.
 */

/** Understanding PHP arrays in a better way
 * PHP arrays are so dynamic and flexible that we even have to think about
 * whether we are using a regular array, an associative array, or a multidimensional
 * array as opposed to most other languages. We do not need to define the size
 * and data type fo the array we are going to use. So how does PHP do that while
 * other languages like C and Java can't? The answer is very simple:
 * 
 *  - the array concept in PHP isi not a real array, ti is actually a HashMap.
 *    In other words, a PHP array is not the plain and simple array concept we
 *    have from other languages. A simple array will look like this, which we
 *    can do in PHP  
*/
$array = [1, 2, 3, 4, 5];

// Here we see a typical array. Similar types of data have a sequential
// index starting from 0 to access the values. So who says PHP arrays aren't
// typical arrays? let's explore some more examples. - Consider the following:
$mixed_array = [];
$mixed_array[0] = 200;
$mixed_array['name'] = 'Mixed array';
$mixed_array[1] = 10.65;
$mixed_array[2] = ['I', 'am', 'another', 'array'];

// This is a PHP array that we use on a daily basis; we do not define the
// size and we are storing integers, a floating point number, a string, and
// even another array. Does it sound odd or is it just a super power  of
// PHP? We can look at the definition from php.net

// NOTE: an array in PHP is actually an ordered map. A map is a type that
// associates values to keys. This type is optimized for several different 
// uses; it can be treated as an array, list(victor), hash table (an implementation
// of a map), dictionary, collection , stack, queue, and probably more. As
// array values can be other arrays, trees and multidimensional arrays are
// also possible. 

// So its true, a php array has got real super powers and it can be used for 
// all possible data structures such as list/vector, hash table, dictionary, 
// collection, stack, queue doubly linked list, and so on. It seems that the
// PHP array has been built in such a way that it is either optimized for 
// everything or it is not optimized for anything. We will explore that in 
// this chapter. 

// If we want to categorize the array, then there are mainly 3 types of arrays
//      - Numeric (indexed) array
//      - Associative array
//      - Multidimensional array
// We are going to explore each type of array with some examples and explanations

// Numeric array
// A numeric array does not mean it only holds numeric data. In fact, it means the
// indexes will be numbers only. In PHP they can eithe rbe sequential or non-sequential
// but they have to be numeric. In numeric arrays, values are stored and accessed
// in a linear way. Here are some example of PHP numeric array:

$array = [10, 20, 30, 40, 50];
$array[] = 70;
$array[] = 80;

$array_size = count($array);
for($i = 0;$i<$array_size;$i++) {
    echo "Position ".$i." holds the value ".$array[$i]."\n";
}
echo"\n";

// This is a very simple example where we have an array defined and indexes
// are autogenerated from 0 and imcremented with the value of the array. When
// When we add a new element in the array using array[]=, it actually increments
// the index and assigns the value in the new index. That is why 70 has the index
// 5 and 80 has the index 6.
// If our data is sequential, we can always use a for loop without any problem
// When we say sequential, we do not mean just 0,1,2,3...,n. It can be 0,5,10,15,20...n,
// where n is a multiple of 5. Or it can be 1,3,5,7,9....n where n is odd. We can
// create of such sequences to maek the array numeric.

// But the big question is, if the indexes are not sequential, can we still construct
// a numeric array? Yes definitely, we just have to adopt a different way to iterate
// Consider the following:
$array = [];
$array[10] = 100;
$array[21] = 200;
$array[29] = 300;
$array[500] = 1000;
$array[1001] = 10000;
$array[71] = 1971;

foreach ($array as $index => $value) {
    echo "Position $index holds the value $value\n";
}
echo"\n";

// Couple things to note here:
// 1. We are iterating the array the way we entered the data. There is no 
//    internal sorting of the indexes at all, though they are all numeric.
// 2. The size of the array $array is only 6. It is not 1002 like c++, Java
//    or other languages where we need to predefine the size of the array before
//    using it. and the max index can be n-1 where n is the size of the array.
//    So in other words the length of the array is 6 but indexes are well past
//    that. 


// Associative Array:
// An associative array is accessed by a key which can be any string. In an 
// associative array, values are stored against the key instead of a linear
// index. We can use an associative array to store any type of data, just like
// the numeric array. Let's create a student array where we will store student
// info:
$student_info = [];
$student_info['name'] = "Adiyan";
$student_info['age'] = 11;
$student_info['class'] = 6;
$student_info['roll_number'] = 71;
$student_info['contact'] = 'info@adiyan.com';

foreach ($student_info as $key => $value) {
    echo $key.": ".$value."\n";
}
echo"\n";

//  Here we simply use each key to hold one piece of data. We can add as many
// keys as we need without any problem. this gives us the flexibility to represent
// a data structure similar to a map or dictionary using an associative array.


// Multidimensional Array:
// A multidimensional array contains arrays in it. In other words, it is an array
// of arrays. This book will use multidimensional arrays in different examples
// as they are one of the most popular and efficient ways of storing data for
// graphs and other tree-type data structures. let's explore them in php
$players = [];
$players[] = ['name'=>'Ronaldo','age'=>31, 'country'=>'Portugal', 'team'=>'Real Madrid'];
$players[] = ['name'=>'Messio','age'=>27, 'country'=>'Argentina', 'team'=>'Barcelona'];
$players[] = ['name'=>'Neymar','age'=>24, 'country'=>'Brazil', 'team'=>'Barcelona'];
$players[] = ['name'=>'Rooney','age'=>30, 'country'=>'England', 'team'=>'Man United'];

foreach ($players as $index=>$player_info) {
    echo"Info of player #".($index+1)."\n";
    foreach ($player_info as $key=>$value) {
        echo $key.": ".$value."\n";
    }
    echo"\n";
}
echo"\n";

// We can create n-dimensional arrays using PHP as per our needs, but we have to 
// remember one thing: the more dimensions we add, the more complex the structure
// becomes. We as humans usually visualize three dimensions, so in order to have more
// than three-dimensional arrays, we must have a solid undestanding of how  an array
// works in multiple dimensions.

// NOTE: We can use a numeric array and an associative array as a single array in 
// PHP, but in such a case, we have to be cautious to choose the right say to
// iterate through the array elements. In such cases, foreach will be a better
// choice than a for or while loop.


// Using an array as flexible storage
// So far we've seen a php array as a dynamic, hybrid data structure for storing
// any type of data. This gives us a lot more freedom to utilize an array as
// a flexible storage container for or data, much like we would use objects
// or classes in other languages. We can mix different data types and different 
// dimensions of data in a single array. We do not have to even define the size
// or type of array we are going to use. We can grow, shrink, and modify data
// to and from an array whenever we need to. 

// Not only does PHP allow us to create dynamic arrays, but it also provides us
// with lots of built-in functionalities for arrays. for example: array_intersect,
// array_merge, array_diff, array_push, array_pop, prev, next, current, end,
// and many more. 

